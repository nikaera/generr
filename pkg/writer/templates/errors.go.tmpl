// Code generated by genmaps.go; DO NOT EDIT.

package {{ .Package }}

type Error struct {
  error
  Code  errorCode  `json:"name"`
  Msg   string  `json:"message"`
  Url   string  `json:"url,omitempty"`
  Meta  map[string]string `json:"metadata"`
}

func (e *Error) Error() string {
  return e.Msg
}

func FindByKey(key string) *Error {
  switch key {
  {{- range .ErrorWithCodes }}
  {{- if .Error.Key }}
  case "{{ .Error.Key }}":
    return {{ .Code.Name }}
  {{- end }}
  {{- end }}
  }

  return nil
}

type errorCode int

const (
  {{- range .ErrorWithCodes }}
  {{- if .Error.Desc }}
  // {{ .Error.Desc }}
  {{- end }}
  {{ .Code.NameWithCode }} errorCode = {{ .Code.ErrorNum }}
  {{ end }}
)

var (
{{- range .ErrorWithCodes}}
  {{- if .Error.Desc }}
  // {{ .Error.Desc }}
  {{- end }}
  {{- if .Error.Meta }}
  //
  //    Metadata includes as follows:
  {{- range $key, $value := .Error.Meta }}
  //      - {{ $key }}: {{ $value }}
  {{- end }}
  {{- end }}
  {{- if .Error.Url }}
  //
  // Reference: {{ .Error.Url }}
  {{- end }}
  {{ .Code.Name }} = &Error{
    Code: {{ .Code.NameWithCode }},
    {{- if .Error.Msg }}
    Msg: "{{ .Error.Msg }}",
    {{- end }}
    {{- if .Error.Url }}
    Url:  "{{ .Error.Url }}",
    {{- end }}
    {{- if .Error.Meta }}
    Meta: map[string]string{
      {{- range $key, $value := .Error.Meta }}
      "{{ $key }}": "{{ $value }}",
      {{- end }}
    },
    {{- end }}
  }
  {{ end }}
)
