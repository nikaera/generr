/*
Copyright Â© 2022 nikaera

*/
package cmd

import (
	"bytes"
	_ "embed"
	"io/ioutil"
	"log"
	"os"

	"github.com/go-playground/validator/v10"
	"github.com/goccy/go-yaml"
	"github.com/nikaera/generr/pkg/info"
	"github.com/nikaera/generr/pkg/writer"
	"github.com/spf13/cobra"
)

// rootCmd represents the base command when called without any subcommands
var rootCmd = &cobra.Command{
	Use:   "generr",
	Short: "Outputs error from yaml with error details.",
	Long: `Execute the generr command with the yaml path as an argument. For example:
generr -package=errors ./errors.yaml

yaml format is as follows.
https://github.com/nikaera/generr/example.yaml
`,
	Run: func(cmd *cobra.Command, args []string) {
		input, _ := cmd.Flags().GetString("input")
		if input == "" {
			log.Fatalln("input is required")
		}

		output, _ := cmd.Flags().GetString("output")
		if output == "" {
			log.Fatalln("output is required")
		}

		spec, _ := ioutil.ReadFile(input)
		buf := bytes.NewBuffer(spec)

		validate := validator.New()
		dec := yaml.NewDecoder(
			buf,
			yaml.Validator(validate),
		)

		var y []info.Info
		err := dec.Decode(&y)
		if err != nil {
			log.Fatalln(err.Error())
		}

		ecs := []*info.ErrorWithCode{}
		ecs = info.ParseErrors(ecs, info.Code{}, y)

		p, _ := cmd.Flags().GetString("package")
		if err := writer.CreateFileWithErrorWithCodes(writer.CreateFileWithErrorWithCodesInput{
			Output:         output,
			Package:        p,
			ErrorWithCodes: ecs,
		}); err != nil {
			log.Fatalln(err.Error())
		}
	},
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}

}

func init() {
	rootCmd.Flags().StringP("input", "i", "", "yaml file path of generr to read. (required)")
	rootCmd.Flags().StringP("output", "o", "", "output destination for files generated by generr. (required)")
	rootCmd.Flags().StringP("package", "p", "generr", "package name of the output destination.")
}
